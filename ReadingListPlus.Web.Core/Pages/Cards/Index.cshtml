@page

@model CardIndexModel

@inject ISettings settings

@{
    ViewData[Constants.ViewTitle] = $"{@Model.Cards.First().DeckTitle} - Priority Queue";
}

<div class="row">
    <div class="col-md-2 pt-2 pb-2">
        <a asp-action="@nameof(DecksController.Read)" asp-controller="@DecksController.Name" asp-route-id="@Model.Cards.First().DeckID" class="btn btn-outline-secondary btn-block">Back</a>
    </div>
</div>


<h2>Priority Queue for @Model.Cards.First().DeckTitle</h2>

<div class="row">
    <div class="col-md-2 pt-2 pb-2">
        <a asp-page="@CardCreateModel.PageName" asp-route-deckId="@Model.Cards.First().DeckID" class="btn btn-primary btn-block">Add @Resources.Item</a>
    </div>
</div>

<table class="table table-hover table-sm notes-table">
    <thead class="thead-light">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Cards.First().DisplayPosition)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.Cards.First().Text)
            </th>

            <th>
            </th>
        </tr>
    </thead>

    <tbody>

        @foreach (var item in Model.Cards)
        {
            <tr class="@(item.IsConnected ? string.Empty : "table-secondary")">
                <td>
                    @Html.DisplayFor(modelItem => item.DisplayPosition)
                </td>

                <td>
                    @item.DisplayText.Truncate(Constants.MaxIndexTextLength)
                </td>

                <td>

                    @{
                        var id = $"menu-{item.ID}";
                        var returnUrl = Url.Page(CardIndexModel.PageName, new { item.DeckID });
                    }

                    <a class="btn btn-outline-secondary btn-block" data-toggle="collapse" href="#@(id)">&hellip;</a>

                    <div class="collapse pt-2" id="@(id)">
                        <a asp-page="@CardReadModel.PageName" asp-route-id="@item.ID" class="btn btn-outline-secondary btn-block">Read</a>

                        @if (item.IsConnected)
                        {
                            <a asp-page="@CardEditModel.PageName" asp-route-id="@item.ID" asp-route-returnUrl="@returnUrl" class="btn btn-outline-secondary btn-block">Edit</a>
                            <a asp-controller="@CardsController.Name" asp-action="@nameof(CardsController.Hide)" asp-route-id="@item.ID" asp-route-returnUrl="@returnUrl" class="btn btn-outline-secondary btn-block">Hide</a>
                        }
                        else
                        {
                            <a asp-page="@CardRestoreModel.PageName" asp-route-id="@item.ID" asp-route-returnUrl="@returnUrl" class="btn btn-success btn-block">Restore</a>
                            <a asp-page="@CardDeleteModel.PageName" asp-route-id="@item.ID" asp-route-returnUrl="@returnUrl" class="btn btn-danger btn-block">Delete</a>
                        }

                    </div>
                </td>
            </tr>
        }

    </tbody>
</table>

@if (User.HasClaim(Constants.FixClaim, Constants.FixClaim))
{
    <hr />

    <div class="row">
        <div class="col-md-2 pt-2 pb-2">
            <a asp-controller="@CardsController.Name" asp-action="@nameof(CardsController.Fix)" asp-route-deckId="@Model.Cards.First().DeckID" class="btn btn-outline-secondary btn-block">Fix</a>
        </div>
    </div>
}
